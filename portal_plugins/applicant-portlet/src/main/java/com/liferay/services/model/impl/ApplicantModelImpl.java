package com.liferay.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.services.model.Applicant;
import com.liferay.services.model.ApplicantModel;
import com.liferay.services.model.ApplicantSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Applicant service. Represents a row in the &quot;t_Applicant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.services.model.ApplicantModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicantImpl}.
 * </p>
 *
 * @author Suresh Kumar
 * @see ApplicantImpl
 * @see com.liferay.services.model.Applicant
 * @see com.liferay.services.model.ApplicantModel
 * @generated
 */
@JSON(strict = true)
public class ApplicantModelImpl extends BaseModelImpl<Applicant>
    implements ApplicantModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a applicant model instance should use the {@link com.liferay.services.model.Applicant} interface instead.
     */
    public static final String TABLE_NAME = "t_Applicant";
    public static final Object[][] TABLE_COLUMNS = {
            { "applicantId", Types.BIGINT },
            { "firstName", Types.VARCHAR },
            { "middleName", Types.VARCHAR },
            { "lastName", Types.VARCHAR },
            { "qualifications", Types.VARCHAR },
            { "addressLine1", Types.VARCHAR },
            { "addressLine2", Types.VARCHAR },
            { "city", Types.VARCHAR },
            { "street", Types.VARCHAR },
            { "postCode", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table t_Applicant (applicantId LONG not null primary key,firstName VARCHAR(75) null,middleName VARCHAR(75) null,lastName VARCHAR(75) null,qualifications VARCHAR(75) null,addressLine1 VARCHAR(75) null,addressLine2 VARCHAR(75) null,city VARCHAR(75) null,street VARCHAR(75) null,postCode VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table t_Applicant";
    public static final String ORDER_BY_JPQL = " ORDER BY applicant.firstName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY t_Applicant.firstName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.services.model.Applicant"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.services.model.Applicant"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.services.model.Applicant"),
            true);
    public static long FIRSTNAME_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.services.model.Applicant"));
    private static ClassLoader _classLoader = Applicant.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Applicant.class
        };
    private long _applicantId;
    private String _firstName;
    private String _originalFirstName;
    private String _middleName;
    private String _lastName;
    private String _qualifications;
    private String _addressLine1;
    private String _addressLine2;
    private String _city;
    private String _street;
    private String _postCode;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private Applicant _escapedModelProxy;

    public ApplicantModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Applicant toModel(ApplicantSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Applicant model = new ApplicantImpl();

        model.setApplicantId(soapModel.getApplicantId());
        model.setFirstName(soapModel.getFirstName());
        model.setMiddleName(soapModel.getMiddleName());
        model.setLastName(soapModel.getLastName());
        model.setQualifications(soapModel.getQualifications());
        model.setAddressLine1(soapModel.getAddressLine1());
        model.setAddressLine2(soapModel.getAddressLine2());
        model.setCity(soapModel.getCity());
        model.setStreet(soapModel.getStreet());
        model.setPostCode(soapModel.getPostCode());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Applicant> toModels(ApplicantSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Applicant> models = new ArrayList<Applicant>(soapModels.length);

        for (ApplicantSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _applicantId;
    }

    public void setPrimaryKey(long primaryKey) {
        setApplicantId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_applicantId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Applicant.class;
    }

    public String getModelClassName() {
        return Applicant.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("applicantId", getApplicantId());
        attributes.put("firstName", getFirstName());
        attributes.put("middleName", getMiddleName());
        attributes.put("lastName", getLastName());
        attributes.put("qualifications", getQualifications());
        attributes.put("addressLine1", getAddressLine1());
        attributes.put("addressLine2", getAddressLine2());
        attributes.put("city", getCity());
        attributes.put("street", getStreet());
        attributes.put("postCode", getPostCode());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long applicantId = (Long) attributes.get("applicantId");

        if (applicantId != null) {
            setApplicantId(applicantId);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }

        String middleName = (String) attributes.get("middleName");

        if (middleName != null) {
            setMiddleName(middleName);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String qualifications = (String) attributes.get("qualifications");

        if (qualifications != null) {
            setQualifications(qualifications);
        }

        String addressLine1 = (String) attributes.get("addressLine1");

        if (addressLine1 != null) {
            setAddressLine1(addressLine1);
        }

        String addressLine2 = (String) attributes.get("addressLine2");

        if (addressLine2 != null) {
            setAddressLine2(addressLine2);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String street = (String) attributes.get("street");

        if (street != null) {
            setStreet(street);
        }

        String postCode = (String) attributes.get("postCode");

        if (postCode != null) {
            setPostCode(postCode);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    public long getApplicantId() {
        return _applicantId;
    }

    public void setApplicantId(long applicantId) {
        _applicantId = applicantId;
    }

    @JSON
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    public void setFirstName(String firstName) {
        _columnBitmask = -1L;

        if (_originalFirstName == null) {
            _originalFirstName = _firstName;
        }

        _firstName = firstName;
    }

    public String getOriginalFirstName() {
        return GetterUtil.getString(_originalFirstName);
    }

    @JSON
    public String getMiddleName() {
        if (_middleName == null) {
            return StringPool.BLANK;
        } else {
            return _middleName;
        }
    }

    public void setMiddleName(String middleName) {
        _middleName = middleName;
    }

    @JSON
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    public void setLastName(String lastName) {
        _lastName = lastName;
    }

    @JSON
    public String getQualifications() {
        if (_qualifications == null) {
            return StringPool.BLANK;
        } else {
            return _qualifications;
        }
    }

    public void setQualifications(String qualifications) {
        _qualifications = qualifications;
    }

    @JSON
    public String getAddressLine1() {
        if (_addressLine1 == null) {
            return StringPool.BLANK;
        } else {
            return _addressLine1;
        }
    }

    public void setAddressLine1(String addressLine1) {
        _addressLine1 = addressLine1;
    }

    @JSON
    public String getAddressLine2() {
        if (_addressLine2 == null) {
            return StringPool.BLANK;
        } else {
            return _addressLine2;
        }
    }

    public void setAddressLine2(String addressLine2) {
        _addressLine2 = addressLine2;
    }

    @JSON
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    public void setCity(String city) {
        _city = city;
    }

    @JSON
    public String getStreet() {
        if (_street == null) {
            return StringPool.BLANK;
        } else {
            return _street;
        }
    }

    public void setStreet(String street) {
        _street = street;
    }

    @JSON
    public String getPostCode() {
        if (_postCode == null) {
            return StringPool.BLANK;
        } else {
            return _postCode;
        }
    }

    public void setPostCode(String postCode) {
        _postCode = postCode;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Applicant.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Applicant toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Applicant) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        ApplicantImpl applicantImpl = new ApplicantImpl();

        applicantImpl.setApplicantId(getApplicantId());
        applicantImpl.setFirstName(getFirstName());
        applicantImpl.setMiddleName(getMiddleName());
        applicantImpl.setLastName(getLastName());
        applicantImpl.setQualifications(getQualifications());
        applicantImpl.setAddressLine1(getAddressLine1());
        applicantImpl.setAddressLine2(getAddressLine2());
        applicantImpl.setCity(getCity());
        applicantImpl.setStreet(getStreet());
        applicantImpl.setPostCode(getPostCode());
        applicantImpl.setCreateDate(getCreateDate());
        applicantImpl.setModifiedDate(getModifiedDate());

        applicantImpl.resetOriginalValues();

        return applicantImpl;
    }

    public int compareTo(Applicant applicant) {
        int value = 0;

        value = getFirstName().compareTo(applicant.getFirstName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Applicant applicant = null;

        try {
            applicant = (Applicant) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = applicant.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ApplicantModelImpl applicantModelImpl = this;

        applicantModelImpl._originalFirstName = applicantModelImpl._firstName;

        applicantModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Applicant> toCacheModel() {
        ApplicantCacheModel applicantCacheModel = new ApplicantCacheModel();

        applicantCacheModel.applicantId = getApplicantId();

        applicantCacheModel.firstName = getFirstName();

        String firstName = applicantCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            applicantCacheModel.firstName = null;
        }

        applicantCacheModel.middleName = getMiddleName();

        String middleName = applicantCacheModel.middleName;

        if ((middleName != null) && (middleName.length() == 0)) {
            applicantCacheModel.middleName = null;
        }

        applicantCacheModel.lastName = getLastName();

        String lastName = applicantCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            applicantCacheModel.lastName = null;
        }

        applicantCacheModel.qualifications = getQualifications();

        String qualifications = applicantCacheModel.qualifications;

        if ((qualifications != null) && (qualifications.length() == 0)) {
            applicantCacheModel.qualifications = null;
        }

        applicantCacheModel.addressLine1 = getAddressLine1();

        String addressLine1 = applicantCacheModel.addressLine1;

        if ((addressLine1 != null) && (addressLine1.length() == 0)) {
            applicantCacheModel.addressLine1 = null;
        }

        applicantCacheModel.addressLine2 = getAddressLine2();

        String addressLine2 = applicantCacheModel.addressLine2;

        if ((addressLine2 != null) && (addressLine2.length() == 0)) {
            applicantCacheModel.addressLine2 = null;
        }

        applicantCacheModel.city = getCity();

        String city = applicantCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            applicantCacheModel.city = null;
        }

        applicantCacheModel.street = getStreet();

        String street = applicantCacheModel.street;

        if ((street != null) && (street.length() == 0)) {
            applicantCacheModel.street = null;
        }

        applicantCacheModel.postCode = getPostCode();

        String postCode = applicantCacheModel.postCode;

        if ((postCode != null) && (postCode.length() == 0)) {
            applicantCacheModel.postCode = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            applicantCacheModel.createDate = createDate.getTime();
        } else {
            applicantCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            applicantCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            applicantCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return applicantCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{applicantId=");
        sb.append(getApplicantId());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append(", middleName=");
        sb.append(getMiddleName());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", qualifications=");
        sb.append(getQualifications());
        sb.append(", addressLine1=");
        sb.append(getAddressLine1());
        sb.append(", addressLine2=");
        sb.append(getAddressLine2());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", street=");
        sb.append(getStreet());
        sb.append(", postCode=");
        sb.append(getPostCode());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.liferay.services.model.Applicant");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>applicantId</column-name><column-value><![CDATA[");
        sb.append(getApplicantId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>middleName</column-name><column-value><![CDATA[");
        sb.append(getMiddleName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>qualifications</column-name><column-value><![CDATA[");
        sb.append(getQualifications());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addressLine1</column-name><column-value><![CDATA[");
        sb.append(getAddressLine1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addressLine2</column-name><column-value><![CDATA[");
        sb.append(getAddressLine2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>street</column-name><column-value><![CDATA[");
        sb.append(getStreet());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>postCode</column-name><column-value><![CDATA[");
        sb.append(getPostCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
